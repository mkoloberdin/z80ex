Z80~Ex

ZiLOG Z80 CPU emulator
~~~~~~~~~~~~~~~~~~~~~~

Features:
---------

- precise opcode emulation (documented & undocumented)
- exact timings for each opcode (including I/O operations)
- full support for all interrupt modes
- ability to create several virtual CPUs
- portable: written in pure ANSI C
- builds as a library with simple callback-based API
- disassembler included  

Building (only GNU toolset is supported out of the box):
--------------------------------------------------------

for build using GNU C (GCC,mingw,cygwin,DJGPP),
issue 'gmake'. static and shared libraries will appear in "./lib".
alternatively you may do "gmake static" for building static library only
(use that with DJGPP 'coz it doesn't support shared libs),
or "gmake shared" for building shared library only.

you may override some build parameters by editing the Makefile, or by
giving command line arguments to gmake, e.g. "gmake parameter=value"
these are:
* ENDIANNESS -- CPU endianness, one of WORDS_LITTLE_ENDIAN, WORDS_BIG_ENDIAN
* OPSTEP_FAST_AND_ROUGH -- fast and rough opcode step emulation mode (0 - off, 1 - on)
	when this mode is on, timings of internal I/O operations are ignored,
	and tstate callback will feature will be disabled
	which results in faster operation


Installing (UNIX/MacOS X):
--------------------------

issue "gmake install" as superuser.
(default install prefix is /usr/local, which may be changed in Makefile.)
then do "/sbin/ldconfig" as superuser to update DSO links and cache


Usage:
------

emulator:

include <z80ex/z80ex.h> in your sources,
link with "libz80ex" (-lz80ex).

for rather subtle API documentation see "z80ex.h".

disassembler:

include <z80ex/z80ex_dasm.h> in your sources,
link with "libz80ex_dasm" (-lz80ex_dasm).

for API documentation see "z80ex_dasm.h".
also look at the "dasm.c" from the "examples" directory


_____________________
yours, Boo-boo
boo_boo(^at^)inbox.ru
